<?php

namespace App\Traits;

use Carbon\Carbon;
use App\Http\Resources\Report as ReportResource;
use App\Http\Resources\Reports as ReportsResource;

trait ReportTraits
{
    public $report = null;

    /**
     *  This method transforms a collection or single model instance
     */
    public function convertToApiFormat($collection = null)
    {
        try {

            // If this instance is a collection or a paginated collection
            if( $collection instanceof \Illuminate\Support\Collection ||
                $collection instanceof \Illuminate\Pagination\LengthAwarePaginator ){

                //  Transform the multiple instances
                return new ReportsResource($collection);

            // If this instance is not a collection
            }elseif($this instanceof \App\Report){

                //  Transform the single instance
                return new ReportResource($this);

            }else{

                return $collection ?? $this;

            }

        } catch (\Exception $e) {

            throw($e);

        }
    }

    /**
     *  This method generates a resource creation report
     */
    public function generateResourceCreationReport($model, $metadata = [], $store_id = null, $location_id = null)
    {
        return $this->generateReport('Created', $model, $metadata, $store_id, $location_id);
    }

    /**
     *  This method generates a resource conversion report
     */
    public function generateResourceConversionReport($model, $metadata = [], $store_id = null, $location_id = null)
    {
        return $this->generateReport('Conversion', $model, $metadata, $store_id, $location_id);
    }

    /**
     *  This method generates a resource abandoned report
     */
    public function generateResourceAbandonedReport($model, $metadata = [], $store_id = null, $location_id = null)
    {
        return $this->generateReport('Abandoned', $model, $metadata, $store_id, $location_id);
    }

    /**
     *  This method generates a resource visited report
     */
    public function generateResourceVisitedReport($model, $metadata = [], $store_id = null, $location_id = null)
    {
        return $this->generateReport('Visited', $model, $metadata, $store_id, $location_id);
    }

    /**
     *  This method generates a resource creation report
     */
    public function generateReport($type, $model, $metadata, $store_id, $location_id)
    {
        //  Create a new report
        return ( new \App\Report() )->createResource([
            'type' => $type,
            'metadata' => $metadata,
            'store_id' => $store_id,
            'location_id' => $location_id,
            /**
             *  Set the user id if available.
             *  Note that the system runs background processes that require the system to log
             *  reports, however since an authenticated user is not present this value may not
             *  be set for reports generated by the system.
             */
            'user_id' => auth('api')->user() ? auth('api')->user()->id : null,
        ], $model);

    }

    /**
     *  This method creates a new report
     */
    public function createResource($data = [], $model = null)
    {
        try {

            //  Extract the Request Object data (CommanTraits)
            $data = $this->extractRequestData($data);

            //  Set the template with the resource fields allowed
            $template = collect($data)->only($this->getFillable())->toArray();

            /**
             *  Create a new resource
             */
            $this->report = $this->create($template);

            //  If created successfully
            if ( $this->report ) {

                //  Set the model as the report owner
                $this->report->setResourceOwner($model);

                //  Return the report
                return $this->report;

            }

        } catch (\Exception $e) {

            throw($e);

        }

    }

    /**
     *  This method returns a list of reports
     */
    public function getResources($data = [], $builder = null, $paginate = true, $convert_to_api_format = true)
    {
        try {

            //  Extract the Request Object data (CommanTraits)
            $data = $this->extractRequestData($data);

            //  Validate the data (CommanTraits)
            $this->getResourcesValidation($data);

            //  If we already have an eloquent builder defined
            if( is_object($builder) ){

                //  Set the reports to this eloquent builder
                $reports = $builder;

            }else{

                //  Get the reports
                $reports = \App\Report::latest();

            }

            //  Filter the reports
            $reports = $this->filterResources($data, $reports);

            //  Return reports
            return $this->collectionResponse($data, $reports, $paginate, $convert_to_api_format);

        } catch (\Exception $e) {

            throw($e);

        }
    }

    /**
     *  This method filters the reports by search or status
     */
    public function filterResources($data = [], $reports)
    {
        //  If we need to search for specific reports
        if ( isset($data['search']) && !empty($data['search']) ) {

            $reports = $this->filterResourcesBySearch($data, $reports);

        }else{

            if ( isset($data['type']) && !empty($data['type']) ) {

                $reports = $this->filterResourcesByType($data, $reports);

            }

            if ( isset($data['owner_type']) && !empty($data['owner_type']) ) {

                $reports = $this->filterResourcesByOwnerType($data, $reports);

            }

        }

        //  Return the reports
        return $reports;
    }

    /**
     *  This method filters the reports by search
     */
    public function filterResourcesBySearch($data = [], $reports)
    {
        //  Set the search term e.g "Bravo Cinema"
        $search_term = $data['search'] ?? null;

        //  Return searched reports otherwise original reports
        return empty($search_term) ? $reports : $reports->search($search_term);

    }

    /**
     *  This method filters the reports by type
     */
    public function filterResourcesByType($data = [], $reports)
    {
        //  Set the types to an empty array
        $types = [];

        //  Set the type filters e.g ["created", "removed", "visited", ...] or "created,removed,visited, ..."
        $type_filters = $data['type'] ?? $data;

        //  If the filters are provided as String format e.g "created,removed,visited"
        if( is_string($type_filters) ){

            //  Set the types to the exploded Array ["created", "removed", "visited"]
            $types = explode(',', $type_filters);

        }elseif( is_array($type_filters) ){

            //  Set the types to the given Array ["created", "removed", "visited"]
            $types = $type_filters;

        }

        //  Clean-up each type filter
        foreach ($types as $key => $type) {

            //  Convert " created " to "Created"
            $types[$key] = ucfirst(strtolower(trim($type)));

        }

        if ( $reports && count($types) ) {

            $reports->wherein('type', $types);

        }

        //  Return the reports
        return $reports;
    }

    /**
     *  This method filters the reports by owner types
     */
    public function filterResourcesByOwnerType($data = [], $reports)
    {
        //  Set the types to an empty array
        $types = [];

        //  Set the type filters e.g ["store", "location", "user", ...] or "store,location,user, ..."
        $type_filters = $data['owner_type'] ?? $data;

        //  If the filters are provided as String format e.g "created,removed,visited"
        if( is_string($type_filters) ){

            //  Set the types to the exploded Array ["store", "location", "user"]
            $types = explode(',', $type_filters);

        }elseif( is_array($type_filters) ){

            //  Set the types to the given Array ["store", "location", "user"]
            $types = $type_filters;

        }

        //  Clean-up each type filter
        foreach ($types as $key => $type) {

            //  Convert " store " to "Store"
            $types[$key] = ucfirst(strtolower(trim($type)));

        }

        if ( $reports && count($types) ) {

            $reports->wherein('owner_type', $types);

        }

        //  Return the reports
        return $reports;
    }

}
